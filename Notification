local LibraryName = "Notification Library"
local NotificationLibrary = {}
local TweenService = game:GetService("TweenService")
local CoreGui = cloneref(game:GetService("CoreGui")) --plr.PlayerGui
local library
local templateFolder
local canvas

-- Store active notifications to calculate offset
local activeNotifications = {}

function NotificationLibrary:Load()
    library = game:GetObjects("rbxassetid://15133757123")[1]
    templateFolder = library.Templates
    canvas = library.list
    library.Name = LibraryName
    library.Parent = CoreGui
end

function NotificationLibrary:SendNotification(Mode, Text, Duration)
    local libaryCore = CoreGui:FindFirstChild(LibraryName)
    if not CoreGui:FindFirstChild(LibraryName) then
        NotificationLibrary:Load()
    else
        library = libaryCore
        templateFolder = library.Templates
        canvas = library.list
    end

    -- Remove layout if any to avoid constraints (optional, depending on your design)
    local layout = canvas:FindFirstChildWhichIsA("UIListLayout") or canvas:FindFirstChildWhichIsA("UIGridLayout")
    if layout then
        layout:Destroy()
    end

    if templateFolder:FindFirstChild(Mode) then
        task.spawn(function()
            local success, err = pcall(function()
                local Notification = templateFolder:WaitForChild(Mode):Clone()
                local filler = Notification.Filler
                local bar = Notification.bar
                Notification.Header.Text = Text
                
                Notification.Visible = true
                Notification.Parent = canvas

                -- Set anchor point to bottom right (1, 1)
                Notification.AnchorPoint = Vector2.new(1, 1)

                -- Calculate Y offset based on the number of active notifications
                local offset = (#activeNotifications * 100) -- Each notification is offset by 100 pixels
                Notification.Position = UDim2.new(1, -10, 1, -10 - offset) -- Move each new notification above the previous one

                -- Add the new notification to the list of active notifications
                table.insert(activeNotifications, Notification)

                Notification.Size = UDim2.new(0, 0, 0.087, 0)
                filler.Size = UDim2.new(1, 0, 1, 0)

                local T1 = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local T2 = TweenInfo.new(Duration, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                local T3 = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

                TweenService:Create(Notification, T1, {Size = UDim2.new(1, 0, 0.087, 0)}):Play()
                task.wait(0.2)
                TweenService:Create(filler, T3, {Size = UDim2.new(0.011, 0, 1, 0)}):Play()

                TweenService:Create(bar, T2, {Size = UDim2.new(1, 0, 0.05, 0)}):Play()

                task.wait(Duration)

                TweenService:Create(filler, T1, {Size = UDim2.new(1, 0, 1, 0)}):Play()
                task.wait(0.25)
                TweenService:Create(Notification, T3, {Size = UDim2.new(0, 0, 0.087, 0)}):Play()
                task.wait(0.25)

                -- Remove the notification from the active list and adjust remaining notifications
                Notification:Destroy()
                for i, notif in ipairs(activeNotifications) do
                    if notif == Notification then
                        table.remove(activeNotifications, i)
                        break
                    end
                end

                -- Shift up the notifications to fill the gap
                for i, notif in ipairs(activeNotifications) do
                    local newOffset = (i - 1) * 100
                    notif.Position = UDim2.new(1, -10, 1, -10 - newOffset)
                end
            end)
            if not success then
                warn("There was an error while trying to create a notification!")
                warn(err)
            end
        end)
    else
        warn("Invalid theme applied")
    end
end

return NotificationLibrary
